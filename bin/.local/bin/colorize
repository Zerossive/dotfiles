#!/usr/bin/env bash
# ==============================================================================
# Script Name: colorize
# Description: Colorize text using hex color codes
# Author: Danny Harris
# ==============================================================================

# -e: exit on error, -u: treat unset variables as errors, -o pipefail: pipe will fail if any command fails
set -euo pipefail

# print instructions
usage() {
    echo -e "Usage: colorize [\e[1m#RRGGBB\e[0m|\e[1mdefault\e[0m|\e[1m.\e[0m|\e[1m-\e[0m] [\e[1mTEXT\e[0m]"
}

# print error and instructions
error-out() {
    echo "Error: $*" >&2
    usage >&2
    exit 1
}

#if no arguments are passed, print error and instructions
if [[ -z "$*" ]]; then
    error-out "No arguments passed"
fi

# save first argument as color and ust the rest as text to colorize
color=$1
shift

# Ensure color is formatted correctly, or uses a valid default value
if [[ ! $color =~ ^#?[0-9a-fA-F]{6}$ ]]; then
    if [[ $color =~ ^(\-|\.|default)$ ]]; then
        color="#CDD6F4"
    else
        error-out "Invalid color format"
    fi
fi

# add '#' to the color if it is missing
if [[ ! $color =~ ^# ]]; then
    color="#$color"
fi

# If arguments are passed as text to be colorized, use them, otherwise check stdin
text=""
if [[ -n "$*" ]]; then
    text="$*"
else
    if [ -p /dev/stdin ]; then
        text="$(</dev/stdin)"
    else
        error-out "No text to colorize"
    fi
fi

# convert hex to rgb and print colorized text
echo -e "\e[38;2;$(printf '%d;%d;%d' 0x${color:1:2} 0x${color:3:2} 0x${color:5:2})m$text\e[0m"

# vim: set ft=sh:
